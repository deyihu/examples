/*!
 * maptalks.routeplayer v0.1.0
 * LICENSE : MIT
 * (c) 2016-2023 maptalks.org
 */
!function(t,i){"object"==typeof exports&&"undefined"!=typeof module?i(exports,require("maptalks")):"function"==typeof define&&define.amd?define(["exports","maptalks"],i):i((t="undefined"!=typeof globalThis?globalThis:t||self).maptalks=t.maptalks||{},t.maptalks)}(this,(function(t,i){"use strict";function s(t){if(t&&t.i)return t;var i=Object.create(null);return t&&Object.keys(t).forEach((function(s){if("default"!==s){var e=Object.getOwnPropertyDescriptor(t,s);Object.defineProperty(i,s,e.get?e:{enumerable:!0,get:function(){return t[s]}})}})),i.default=t,Object.freeze(i)}var e=s(i);const h=new e.Coordinate([0,0,0]),n=new e.Point(0,0),r=new e.Point(0,0);class l{constructor(t){this.route=t,this.path=t.path}getCoordinates(t,i){if(t<this.getStart()||t>this.getEnd())return null;var s=null;let n=null;for(let i=0,e=this.path.length;i<e;i++)if(t<this.path[i][3]){s=i,n=this.path[i][4];break}null===s&&(s=this.path.length-1);const r=this.path[s-1],l=this.path[s],o=(t-r[3])/(l[3]-r[3]),a=r[0]+(l[0]-r[0])*o,u=r[1]+(l[1]-r[1])*o,c=r[2]+(l[2]-r[2])*o,f=i.getGLRes();h.set(a,u,c);const y=i.coordinateToPointAtRes(h,f);h.set(r[0],r[1],r[2]);const d=i.coordinateToPointAtRes(h,f),m=e.Util.computeDegree(d.x,d.y,y.x,y.y);return{coordinate:new e.Coordinate(a,u,c),viewPoint:y,degree:m,index:s,payload:n}}getStart(){return this.path[0][3]}getEnd(){return this.path[this.getCount()-1][3]}getCount(){return this.path.length}get markerSymbol(){return this.route.markerSymbol}set markerSymbol(t){this.route.markerSymbol=t,this.s&&this.s.marker&&this.s.marker.setSymbol(t)}get lineSymbol(){return this.route.lineSymbol}set lineSymbol(t){this.route.lineSymbol=t,this.s&&this.s.marker&&this.s.line.setSymbol(t)}get trailLineSymbol(){return this.route.trailLineSymbol}set trailLineSymbol(t){this.route.trailLineSymbol=t,this.s&&this.s.marker&&this.s.trailLine.setSymbol(t)}}class o extends(e.Eventable(e.Class)){constructor(t,i,s){super(s),Array.isArray(t)||(t=[t]),this.id=e.Util.UID(),this.h=i,this.l(t)}get map(){return this.h?this.h.getMap():null}addTo(t){this.h=t}remove(){return this.markerLayer?(this.player.playState="finished",this.markerLayer.remove(),this.lineLayer.remove(),this.trailLineLayer.remove(),delete this.markerLayer,delete this.lineLayer,delete this.trailLineLayer,delete this.h,this):this}play(){return"running"===this.player.playState||(this.player.play(),this.fire("playstart")),this}pause(){return"paused"===this.player.playState||(this.player.pause(),this.fire("playpause")),this}cancel(){this.player.cancel(),this.played=0,this.trailLinePoints=[];let t=this.trailLineLayer.getGeometries()[0];void 0!==t&&this.options.showTrail&&t.setCoordinates(this.trailLinePoints),this.o(),this.u({styles:{t:0}});const i=this.m("playcancel");return this.fire("playcancel",i),this}finish(){return"finished"===this.player.playState||(this.player.finish(),this.u({styles:{t:1}})),this}m(t){const i=this.lineLayer.getGeometries()[0],s={};if(i){const e=i.getCoordinates();let h=0;"playfinish"===t&&(h=e.length-2);const n=this.p(e[h+1],e[h]);s.rotationZ=n.rotationZ,s.rotationX=n.rotationX,s.coordinate="playfinish"===t?e[h+1]:e[h]}return s}getStartTime(){return this.startTime||0}getEndTime(){return this.endTime||0}getCurrentTime(){return this.played?this.startTime+this.played:this.startTime}getRoutes(){return this.routes}setTime(t){return this.played=t-this.startTime,this.played<0&&(this.played=0),this.g(),this}getUnitTime(){return this.options.unitTime}setUnitTime(t){this.options.unitTime=+t,this.g()}getCurrentProperties(t){return t||(t=0),this.routes[t]&&this.routes[t].s?this.routes[t].s.marker.getProperties():null}getCurrentCoordinates(t){return t||(t=0),this.routes[t]&&this.routes[t].s?this.routes[t].s.marker.getCoordinates():null}getMarkerSymbol(t){return this.routes&&this.routes[t]?this.routes[t].markerSymbol:null}getMarker(t){return t||(t=0),this.routes[t]&&this.routes[t].s?this.routes[t].s.marker:null}setMarkerSymbol(t,i){return this.routes&&this.routes[t]&&(this.routes[t].markerSymbol=i),this}getLineSymbol(t){return this.routes&&this.routes[t]?this.routes[t].lineSymbol:null}setLineSymbol(t,i){return this.routes&&this.routes[t]&&(this.routes[t].lineSymbol=i),this}showRoute(){this.lineLayer.show()}showTrail(){this.trailLineLayer.show()}hideRoute(){this.lineLayer.hide()}hideTrail(){this.trailLineLayer.hide()}g(){const t=this.player&&"running"===this.player.playState;t&&this.player.finish(),this.o(),t&&this.player.play()}u(t){if(t.state&&"running"!==t.state.playState){if("finished"===t.state.playState){const t=this.m("playfinish");this.fire("playfinish",t)}}else{this.played=this.duration*t.styles.t;for(let t=0,i=this.routes.length;t<i;t++)this._(this.routes[t],this.startTime+this.played);if(this.trailLinePoints&&this.trailLinePoints.length>1){const t=this.trailLinePoints.length,i=this.trailLinePoints[t-1],s=this.trailLinePoints[t-2],e=this.p(i,s),{rotationX:h,rotationZ:n,coordinate:r}=e;this.fire("playing",{rotationX:h,rotationZ:n,coordinate:r,time:this.played})}}}_(t,i){if(!this.map)return;const s=t.getCoordinates(i,this.map);if(s){if(t.s||(t.s={}),t.s.marker)t.s.marker.setProperties(s.payload),t.s.marker.setCoordinates(s.coordinate);else{const i=new e.Marker(s.coordinate,{symbol:t.markerSymbol||this.options.markerSymbol}).addTo(this.markerLayer);t.s.marker=i}if(!t.s.line){const i=new e.LineString(t.path,{symbol:t.lineSymbol||this.options.lineSymbol}).addTo(this.lineLayer);t.s.line=i}if(t.s.trailLine){const i=this.options.maxTrailLine;0!==i&&this.trailLinePoints.length>i&&this.trailLinePoints.shift(),this.trailLinePoints.push(s.coordinate),this.trailLinePoints.length>1&&this.options.showTrail&&t.s.trailLine.setCoordinates(this.trailLinePoints)}else{this.trailLinePoints=[s.coordinate];const i=new e.LineString([],{symbol:t.trailLineSymbol||this.options.trailLineSymbol}).addTo(this.trailLineLayer);t.s.trailLine=i}}else t.s&&t.s.marker&&(t.s.marker.remove(),delete t.s.marker)}p(t,i){const s=this.map.getGLRes(),h=this.map.coordinateToPointAtRes(t,s,n),l=this.map.coordinateToPointAtRes(i,s,r),o=e.Util.computeDegree(h.x,h.y,l.x,l.y),a=this.map.altitudeToPoint(t.z,s),u=this.map.altitudeToPoint(i.z,s),c=e.Util.computeDegree(l.x,u,h.x,a),f=o/Math.PI*180;let y=c/Math.PI*180;return t.x>=i.x?y=-y:y+=180,{rotationZ:f,rotationX:y,coordinate:t}}l(t){const i=t.map(t=>new l(t));var s=i[0].getStart(),e=i[0].getEnd();for(let t=1;t<i.length;t++){let h=i[t];h.getStart()<s&&(s=h.getStart()),h.getEnd()>e&&(e=h.getEnd())}this.trailLinePoints=[],this.routes=i,this.startTime=s,this.endTime=e,this.played=0,this.duration=e-s,this.S(),this.o()}o(){const t=(this.duration-this.played)/this.options.unitTime;let i;const s=this.map.getRenderer();s.callInFrameLoop&&(i=function(t){s.callInFrameLoop(t)}),this.player=e.animation.Animation.animate({t:[this.played/this.duration,1]},{framer:i,speed:t,easing:"linear"},this.u.bind(this))}S(){this.lineLayer=new e.LineStringLayer(e.INTERNAL_LAYER_PREFIX+"_routeplay_r_"+this.id,[],{visible:this.options.showRoutes,enableSimplify:!1}).addTo(this.h),this.trailLineLayer=new e.LineStringLayer(e.INTERNAL_LAYER_PREFIX+"_routeplay_t_"+this.id,[],{visible:this.options.showTrail,enableSimplify:!1}).addTo(this.h),this.markerLayer=new e.PointLayer(e.INTERNAL_LAYER_PREFIX+"_routeplay_m_"+this.id,[],{visible:this.options.showMarker}).addTo(this.h)}}o.mergeOptions({unitTime:1e3,showRoutes:!0,showTrail:!0,showMarker:!0,maxTrailLine:0,markerSymbol:null,lineSymbol:{lineWidth:2,lineColor:"#004A8D"},trailLineSymbol:{lineColor:"rgba(250,0,0,1)",lineWidth:4,lineJoin:"round",lineCap:"round",lineDasharray:null,"lineOpacity ":1}}),t.Route=l,t.RoutePlayer=o,Object.defineProperty(t,"i",{value:!0}),"undefined"!=typeof console&&console.log("maptalks.routeplayer v0.1.0")}));
